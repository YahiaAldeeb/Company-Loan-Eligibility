# -*- coding: utf-8 -*-
"""Copy of Project_Template.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h8O4yJAUCxZpO-_7mEu5MhD86u6_BW0w

# This notebook is prepared by ApplAi's Technical And Training Depratment.
- Please Don't use it outside the training without asking for permission as it's considered as Violation of Intellectual property rights

![ApplAi's Logo](https://media-exp1.licdn.com/dms/image/C4E0BAQHGLGltI2rzuQ/company-logo_200_200/0?e=2159024400&v=beta&t=adq8rNV09dPC6egdJMnfARt6Aq0TC9bSomFvFtm50WM)

### Task 1: Importing libraries and Exploring the Dataset.

### Task 2: Definining Exploratory Data Analysis with an overview of the whole project .

### Task 3: Checking missing values and Outliers & Creating visual methods to analyze the data.

### Task 4: creat a model that fits the data

### Task 5: creating an accurecy table

###

### Task 1: Importing libraries and Exploring the Dataset.
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

mall = pd.read_csv('Mall_Customers.csv')

"""### Task 2: Definining Exploratory Data Analysis with an overview of the whole project"""

mall.head(10)

mall.shape

mall.isna().sum()

mall.duplicated().sum()

mall = mall.drop('CustomerID', axis =1)

mall.isna().sum()

"""### Task 3: Checking missing values and Outliers & Creating visual methods to analyze the data."""

import warnings
warnings.filterwarnings('ignore')

Q1 = mall['Annual Income (k$)'].quantile(0.25)
Q3 = mall['Annual Income (k$)'].quantile(0.75)
IQR = Q3-Q1
#----------------------------------------------------
lower_bound = Q1-1.5*IQR
upper_bound = Q3+1.5*IQR
#----------------------------------------------------
for i in range(len(mall)):
  if mall['Annual Income (k$)'].iloc[i] > upper_bound:
          mall.loc[i, 'Annual Income (k$)'] = mall['Annual Income (k$)'].mean()
  if mall['Annual Income (k$)'].iloc[i] < lower_bound:
          mall.loc[i, 'Annual Income (k$)'] = mall['Annual Income (k$)'].mean()

Q1 = mall['Spending Score (1-100)'].quantile(0.25)
Q3 = mall['Spending Score (1-100)'].quantile(0.75)
IQR = Q3-Q1
#----------------------------------------------------
lower_bound = Q1-1.5*IQR
upper_bound = Q3+1.5*IQR
#----------------------------------------------------
for i in range(len(mall)):
  if mall['Spending Score (1-100)'].iloc[i] > upper_bound:
          mall.loc[i, 'Spending Score (1-100)'] = mall['Spending Score (1-100)'].mean()
  if mall['Spending Score (1-100)'].iloc[i] < lower_bound:
          mall.loc[i, 'Spending Score (1-100)'] = mall['Spending Score (1-100)'].mean()

Q1 = mall['Age'].quantile(0.25)
Q3 = mall['Age'].quantile(0.75)
IQR = Q3-Q1
#----------------------------------------------------
lower_bound = Q1-1.5*IQR
upper_bound = Q3+1.5*IQR
#----------------------------------------------------
for i in range(len(mall)):
  if mall['Age'].iloc[i] > upper_bound:
          mall.loc[i, 'Age'] = mall['Age'].mean()
  if mall['Age'].iloc[i] < lower_bound:
          mall.loc[i, 'Age'] = mall['Age'].mean()

Gender_count = mall['Gender'].value_counts()
total = Gender_count.sum()

Male= (Gender_count['Male']/total)*100
Female= (Gender_count['Female']/total)*100

print('Male Percentage:',int(Male))
print('Female Percentage:',int(Female))

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
#-------------------------------------------------
mall['Gender'] = label_encoder.fit_transform(mall['Gender'])

mall['Annual Income (k$)'].max()

gender_labels = ['Male', 'Female']
gender_percentages = []
gender_percentages.append(Male)
gender_percentages.append(Female)
#---------------------------
plt.figure(figsize = (5,5))
plt.pie(gender_percentages, labels=gender_labels, autopct='%1.1f%%', startangle=140)
plt.title('Gender Distribution')
plt.axis('equal')
plt.show()

print(mall['Age'].describe(),"\n\n\n-------------------------------------------\n\n\n")
#-----------------------------------------
n =[0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]
plt.figure(figsize = (18,5))
sns.distplot(mall['Age'],bins =20,rug=True,hist_kws={'edgecolor': 'black'})
plt.xlim(0,100)
plt.title("Age Distribuition")
plt.xlabel("Age")
plt.ylabel("Amount")
plt.xticks(n)
plt.show()

print(mall['Annual Income (k$)'].describe(),"\n\n\n-------------------------------------------\n\n\n")
#-----------------------------------------
plt.figure(figsize = (18,5))
sns.distplot(mall['Annual Income (k$)'],bins =20,rug=True,hist_kws={'edgecolor': 'black'})
plt.xlim(0,150)
plt.title("Age Distribuition")
plt.xlabel("Age")
plt.ylabel("Amount")
plt.show()

print(mall['Spending Score (1-100)'].describe(),"\n\n\n-------------------------------------------\n\n\n")
#-----------------------------------------
plt.figure(figsize = (18,5))
sns.distplot(mall['Spending Score (1-100)'],bins =20,rug=True,hist_kws={'edgecolor': 'black'})
plt.xlim(0,100)
plt.title("Age Distribuition")
plt.xlabel("Age")
plt.ylabel("Amount")
plt.show()

plt.figure(figsize=(18, 5))
plt.plot(mall['Age'],mall['Spending Score (1-100)'],'ro', ms = 8 , mec= 'k')
plt.xlabel('Age')
plt.ylabel('Spending Score')
plt.title('Age vs. Spending Score')
plt.grid(True)
plt.legend()
plt.show()

men_spending = mall[mall['Gender']== 1]['Spending Score (1-100)']
women_spending = mall[mall['Gender'] == 0]['Spending Score (1-100)']
#---------------------------------------------------------------------------
plt.figure(figsize=(14,5))
plt.subplot(1,2,1)
sns.histplot(men_spending,bins=20, kde=True, color='skyblue')
plt.title('Histogram plot of Men\'s spending score')
plt.xlabel('Spending Score (1-100)')
plt.ylabel('Count')
plt.subplot(1,2,2)
sns.histplot(women_spending,bins=20, kde=True, color='pink')
plt.title('Histogram plot of Women\'s spending score')
plt.xlabel('Spending Score (1-100)')
plt.ylabel('Count')
plt.show()

men_income = mall[mall['Gender'] == 1]['Annual Income (k$)']
women_income = mall[mall['Gender'] == 0]['Annual Income (k$)']
#---------------------------------------------------------------------------
plt.figure(figsize=(14,5))
plt.subplot(1,2,1)
sns.histplot(men_income,bins=20, kde=True, color='skyblue')
plt.title('Histogram plot of Men\'s income')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Count')
plt.subplot(1,2,2)
sns.histplot(women_income,bins=20, kde=True, color='pink')
plt.title('Histogram plot of Women\'s income')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Count')
plt.show()

score1= mall['Spending Score (1-100)'][(mall["Spending Score (1-100)"] >= 1) & (mall["Spending Score (1-100)"] <= 20)]
score2= mall['Spending Score (1-100)'][(mall["Spending Score (1-100)"] >= 21) & (mall["Spending Score (1-100)"] <= 40)]
score3= mall['Spending Score (1-100)'][(mall["Spending Score (1-100)"] >= 41) & (mall["Spending Score (1-100)"] <= 60)]
score4= mall['Spending Score (1-100)'][(mall["Spending Score (1-100)"] >= 61) & (mall["Spending Score (1-100)"] <= 80)]
score5= mall['Spending Score (1-100)'][(mall["Spending Score (1-100)"] >= 81) & (mall["Spending Score (1-100)"] <= 100)]
#------------------------------------------------------------------------------------------------------------------------
x_label = ["1-20", "21-40", "41-60", "61-80", "81-100"]
y_label = [len(score1),len(score2),len(score3),len(score4),len(score5)]
#------------------------------------------------------------------------------------------------------------------------
plt.figure(figsize=(15,6))
sns.barplot(x=x_label, y=y_label, palette='viridis')
plt.title("Spending Scores")
plt.xlabel("Score")
plt.ylabel("Count")
plt.show()

score1= mall['Age'][(mall["Age"] >= 18) & (mall["Age"] <= 25)]
score2= mall['Age'][(mall["Age"] >= 26) & (mall["Age"] <= 35)]
score3= mall['Age'][(mall["Age"] >= 36) & (mall["Age"] <= 45)]
score4= mall['Age'][(mall["Age"] >= 46) & (mall["Age"] <= 55)]
score5= mall['Age'][(mall["Age"] >= 55)]
#------------------------------------------------------------------------------------------------------------------------
x_label = ["18-25", "26-35", "36-45", "46-55", "55+"]
y_label = [len(score1),len(score2),len(score3),len(score4),len(score5)]
#------------------------------------------------------------------------------------------------------------------------
plt.figure(figsize=(15,6))
sns.barplot(x=x_label, y=y_label, palette='viridis')
plt.title("Age Count")
plt.xlabel("Age")
plt.ylabel("Count")
plt.show()

"""### Task 4: creat a model that fits the data

## K-Means

---
"""

from sklearn.cluster import KMeans
#---------------------------------------------------------------
kmeans = KMeans(n_clusters=5, random_state=0)
y_predicted = kmeans.fit_predict(mall)
mall['Clusters'] = kmeans.labels_
#---------------------------------------------------------------
sns.scatterplot(x='Spending Score (1-100)', y='Annual Income (k$)',hue = 'Clusters',  data=mall,palette='viridis')

K=range(2,12)
wss = []
#--------------------------------------------------------------
for k in K:
    kmeans= KMeans(n_clusters=k, random_state=0)
    kmeans=kmeans.fit(mall[['Spending Score (1-100)','Annual Income (k$)']])
    wss_iter = kmeans.inertia_
    wss.append(wss_iter)
#--------------------------------------------------------------
plt.figure(figsize=(7,7))
plt.xlabel('K')
plt.ylabel('Within-Cluster-Sum of Squared Errors (WSS)')
plt.grid('true')
plt.plot(K,wss)

"""## DBScan

---


"""

from sklearn.cluster import DBSCAN
#---------------------------------------------------------
dbscan = DBSCAN(eps = 0.5, min_samples = 1).fit(mall)
labels = dbscan.labels_
#---------------------------------------------------------
sns.scatterplot(x='Spending Score (1-100)', y='Annual Income (k$)',hue = labels,  data=mall,palette='viridis')

from sklearn.cluster import KMeans

# Assuming you have preprocessed data stored in X
X=mall[['Age','Gender','Annual Income (k$)','Spending Score (1-100)']]
# Choose the number of clusters
num_clusters = 5

# Create a KMeans object and fit it to the data
kmeans = KMeans(n_clusters=num_clusters)
kmeans.fit(X)

# Obtain the cluster assignments for each data point
cluster_labels = kmeans.labels_

# Assign labels to the clusters
# You can manually assign labels based on domain knowledge or use other techniques
cluster_labels_to_labels = {
    0: 'Label A',
    1: 'Label B',
    2: 'Label C',
    3: 'Label D',
    4: 'Label E'
}

# Assign labels to data points based on cluster assignments
assigned_labels = [cluster_labels_to_labels[label] for label in cluster_labels]

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.model_selection import train_test_split
#---------------------------------------------------------
X_train, X_test, y_train, y_test = train_test_split(X, assigned_labels, test_size = 0.2, random_state = 4)
classifier=LogisticRegression()
classifier.fit (X_train ,y_train)
y_pred=classifier.predict(X_test)
#---------------------------------------------------------
cm = confusion_matrix(y_test, y_pred)
cr=classification_report(y_test, y_pred)
acc = accuracy_score(y_test,y_pred)
#---------------------------------------------------------
print("The Confusion Matrix:\n", cm)
print("\n\n-----------------------------------------------------------------------------\n\n")
print("The Classification Report:\n\n\n",cr)
print("\n\n-----------------------------------------------------------------------------\n\n")
print("The Accuracy Score:",acc)
print("\n\n-----------------------------------------------------------------------------\n\n")

import joblib

joblib_file = "Customer_Segmentation"
joblib.dump(classifier, joblib_file)